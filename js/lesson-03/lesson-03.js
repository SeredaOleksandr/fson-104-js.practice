//! Array methods
//TODO:=========task-01=================
// –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [1, 2, 3, 4, 5]. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –≤—Ö—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 4, 9, 16, 25].

// const numbers = [1, 2, 3, 4, 5];
// const updatedNumbers = numbers.map(number => number ** 2);
// console.log('üöÄ -> updatedNumbers:', updatedNumbers);

//TODO:=========task-02=================
// –î–∞–Ω–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ {id: 1, values: [1, 2, 3]}, {id: 2, values: [4, 5, 6]}, {id: 3, values: [7, 8, 9]}. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–∞—Å–∏–≤—ñ–≤ values –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç—É, –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤ –æ–¥–Ω–æ–º—É –º–∞—Å–∏–≤—ñ. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3, 4, 5, 6, 7, 8, 9].

// const data = [
//   { id: 1, values: [1, 2, 3] },
//   { id: 2, values: [4, 5, 6] },
//   { id: 3, values: [7, 8, 9] },
// ];

// const values = data.flatMap(({ values }) => values);
// console.log('values', values);

//TODO:=========task-03=================
// –î–∞–Ω–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ {name: "John", age: 27}, {name: "Jane", age: 31}, {name: "Bob", age: 19}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –æ–±'—î–∫—Ç –∑ –≤—ñ–∫–æ–º –º–µ–Ω—à–µ 20 —Ä–æ–∫—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: true.

// const people = [
//   { name: 'John', age: 27 },
//   { name: 'Jane', age: 31 },
//   { name: 'Bob', age: 19 },
// ];

// const isChild = people.some(({ age }) => age < 20);
// console.log('üöÄ -> isChild:', isChild);

//TODO:=========task-04=================
//  –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [2, 4, 6, 8, 10]. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –ø–∞—Ä–Ω–∏–º. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: true.

// const numbers = [2, 4, 6, 8, 10, 9];
// const isEven = numbers.every(number => number % 2 === 0);
// console.log('üöÄ -> isEven:', isEven);

//TODO:=========task-05=================
// –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [1, 2, 3, 4, 5]. –ó–Ω–∞–π–¥—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç, –±—ñ–ª—å—à–∏–π –∑–∞ 3. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 4.

// const numbers = [1, 2, 3, 4, 5];
// const biggerNumber = numbers.find(number => number > 3);
// console.log('üöÄ -> biggerNumber:', biggerNumber);

//TODO:=========task-06=================
// –í—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [4, 2, 5, 1, 3] —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3, 4, 5].

// const numbersArray = [4, 2, 5, 1, 3, 11, 22];
// // const ascNumbers = [...numbersArray].sort((a, b) => a - b);
// const ascNumbers = numbersArray.toSorted((a, b) => a - b);

// console.log('üöÄ -> ascNumbers:', ascNumbers);
// console.log('üöÄ -> numbersArray:', numbersArray);

//TODO:===============task-07===============================
// –í—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ ["banana", "orange", "apple", "pear"] —É –ø–æ—Ä—è–¥–∫—É –∞–ª—Ñ–∞–≤—ñ—Ç—É. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ["apple", "banana", "orange", "pear"].

// const strings = ['banana', 'orange', 'apple', 'pear'];
// const sortedInAscStrings = strings.toSorted((a, b) => b.localeCompare(a));

// console.log('üöÄ -> sortedInAscStrings:', sortedInAscStrings);

//TODO:===============task-8===============================
//  –í—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ {name: "John", age: 27}, {name: "Jane", age: 31}, {name: "Bob", age: 19} –∑–∞ –≤—ñ–∫–æ–º —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [{name: "Bob", age: 19}, {name: "John", age: 27}, {name: "Jane", age: 31}].

// const users = [
//   { name: 'John', age: 27 },
//   { name: 'Jane', age: 31 },
//   { name: 'Bob', age: 19 },
// ];

// const sortedByAgeUsers = users.toSorted((a, b) => a.age - b.age);
// console.table(sortedByAgeUsers);

//TODO:=========task-09=================
// –î–∞–Ω–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ {name: "John", age: 27}, {name: "Jane", age: 31}, {name: "Bob", age: 19}. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –æ–±'—î–∫—Ç–∏, –≤ —è–∫–∏—Ö –≤—ñ–∫ –±—ñ–ª—å—à–µ 20 —Ä–æ–∫—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [{name: "John", age: 27}, {name: "Jane", age: 31}]

// const user = [
//   { name: 'John', age: 27 },
//   { name: 'Mango', age: 40 },
//   { name: 'Banan', age: 50 },
//   { name: 'Yura', age: 99 },
//   { name: 'Jane', age: 5 },
//   { name: 'Bob', age: 19 },
// ];

// const filteredUsers = user
//   .filter(({ age }) => age > 20)
//   .toSorted((a, b) => a.age - b.age)
//   .map(({ name }) => name);

// console.log('üöÄ -> filteredUsers:', filteredUsers);

//TODO:=========task-10=================
// –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [1, 2, 3, 4, 5]. –ó–∞—Å—Ç–æ—Å—É–π—Ç–µ –º–µ—Ç–æ–¥ reduce –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É

// const numbers = [1, 2, 3, 4, 5];
// const total = numbers.reduce((acc, number) => {
//   console.log('acc', acc);
//   console.log('number', number);
//   console.log('acc + number', acc + number);

//   return acc + number;
// }, 0);

// console.log('üöÄ -> total:', total);

//TODO:=========task-11=================
// –£ –≤–∞—Å —î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª, —ñ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è —Ü–∏—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è.

// const arr = [1, 2, 3, 4, 5, 13, 432, 43, 41];
// const avgNumber = arr.reduce((acc, number) => {
//   console.log(typeof acc);

//   return Math.floor(acc + number / arr.length);
// }, 0);
// console.log('üöÄ -> avgNumber:', avgNumber);

//! Callback
//TODO:============task-01=========================
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–≤–∞ —á–∏—Å–ª–∞ —ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–º–Ω–æ–∂–∏—Ç–∏ —á–∏—Å–ª–∞ –º—ñ–∂ —Å–æ–±–æ—é —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—ñ—ó –¥–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó. –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞, —É —Ä–∞–∑—ñ, —è–∫—â–æ, —Ü–µ —á–∏—Å–ª–æ —î –ø–∞—Ä–Ω–∏–º - –ø–æ–º–Ω–æ–∂–∏—Ç–∏ —Ü–µ —á–∏—Å–ª–æ –Ω–∞ —Å–µ–±–µ, —è–∫—â–æ –Ω—ñ - –≤–∑—è—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–π –∫–æ—Ä—ñ–Ω—å –∑ —Ü—å–æ–≥–æ —á–∏—Å–ª–∞, —Ç–∞ –≤–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥.

// function performOperation(a, b, Callback) {
//   return Callback(a * b);
// }

// function Callback(number) {
//   return number % 2 === 0 ? Math.pow(number, 2) : Math.sqrt(number);
// }

// console.log(performOperation(10, 5, Callback));

//TODO:============task-02=========================
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É,
//—è–∫–∏–π –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, –≤–∏–∑–Ω–∞—á–µ–Ω—É –≤ –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó. –Ø–∫—â–æ —Ç–∞–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –Ω–µ–º–∞—î, —Ñ—É–Ω–∫—Ü—ñ—è
// –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ null. –¢–∞–∫–æ–∂ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ 2 —Ä—ñ–∑–Ω—ñ –∫–æ–ª–±–µ–∫–∏. –ü—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –ø–µ—Ä—à–æ–≥–æ –∫–æ–ª–±–µ–∫—É –º–∞—î
// –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –ø–µ—Ä—à–µ –ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ. –ü—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –¥—Ä—É–≥–æ–≥–æ - –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ —É –º–∞—Å–∏–≤—ñ, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ª—ñ—Ç–µ—Ä–∏
// "O" —É –±—É–¥—å - —è–∫–æ–º—É —Ä–µ—î—Å—Ç—Ä—ñ.

// const numbers = [1, 3, 6, 7, 9, 20];
// const words = ['apple', 'banana', 'orange', 'pear'];

// function findElement(array, callback) {
//   let result = null;

//   array,array.forEach(element => {
//     if(callback(element) && result === null) {
//       result = element;
//     }

//   });
//   return result;
// }

// function isEven(number) {
//   return number % 2 === 0;

// }

// function startWithO(str) {
//   return str.toLowerCase().startsWith("o");
// }

// console.log(findElement(numbers, isEven));

// console.log(findElement(words, startWithO));

//TODO:=========task-01=================
// –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç, —è–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –æ–±'—î–∫—Ç—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–ª—è: —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –≤—ñ–∫, email —Ç–∞ –º–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å
// –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

const user = {
  userName: 'Oven',
  lastName: 'Ken',
  age: 18,
  email: 'oven@gmail.com',

  showUser() {
    console.log(this);
  },
};
// user.showUser();
// const user1 = Object.create(user);
// console.log(user1);
// user1.userName = "Mango";
// user1.showUser();

//TODO:=========task-02=================
// –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—å–µ–∫—Ç–∞ "user", —â–æ –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±'—î–∫—Ç—É, –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ —è–∫–æ–≥–æ –≤–æ–Ω–∞ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∞. –î–æ–¥–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç–∞ user, —Ç–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–µ—ó –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å friends —ñ–∑ –∑–Ω–∞—á–µ–Ω–Ω—è–º:

// function addProperty(key, value) {
//     this[key] = value;
// }

// user.addProperty = addProperty;
// console.log(user);
// user.addProperty("friends", ["John", "Bob"])

//TODO:=========task-03=================
//  –í–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥ user.showUser() —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤—ñ–Ω –≤–∏–≤—ñ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º  ({name: 'Bob', lastName: 'Lasso',age: 50, email: 'BodLasso@gmail.com'})

const obj = {
  userName: 'Bob',
  lastName: 'Lasso',
  age: 50,
  email: 'BodLasso@gmail.com',
};

// user.showUser.call(obj);

//TODO:=========task-04=================
//  –í–∏–∫–ª–∏—á—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é showFullName —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –æ–±'—î–∫—Ç–∞ user

function showFullName(message, num) {
  console.log(`${message}, ${this.userName} ${this.lastName}, ${num}`);
}
showFullName.apply(obj, ['Hello', 10]);
showFullName.call(user, 'bue-bue', 15);

//TODO:=========task-05=================
// –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏, —â–æ–± –∫–æ–¥ –ø—Ä–∞—Ü—é–≤–∞–≤

const product = {
  price: 5000,

  showPrice() {
    console.log(this.price);
  },
};

function callAction(callback) {
  callback();
}

callAction(product.showPrice.bind(product));

//! class
//TODO:=================task-01=============================
// –ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–ª—è–≥–∞—î —É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏, —â–æ –¥–æ–∑–≤–æ–ª—è—î –∫–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ.

// #### –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–ª–∞—Å `Order`, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–∫—ñ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
// - `tableNumber` - –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞, –¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
// - `items` - –º–∞—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –¥–µ –∫–æ–∂–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –º—ñ—Å—Ç–∏—Ç—å —ñ–º'—è (name) —Ç–∞ —Ü—ñ–Ω—É (price)
// - `isPaid` - –ø–æ–∑–Ω–∞—á–∞—î, —á–∏ –æ–ø–ª–∞—á–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (default = false)

// ##### –î–ª—è –∫–ª–∞—Å—É Order –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞–∫—ñ –º–µ—Ç–æ–¥–∏:
// - `calculateTotal`() - –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
// - `markAsPaid`() - –ø–æ–∑–Ω–∞—á–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –æ–ø–ª–∞—á–µ–Ω–µ
// - `addItem`() - —è–∫–∏–π –¥–æ–¥–∞—î –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ –º–∞—Å–∏–≤—É "items"
// - `removeItem`() - —è–∫–∏–π –≤–∏–¥–∞–ª—è—î –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω—è –∑ –º–∞—Å–∏–≤—É "items"
// ##### –î–æ–¥–∞—Ç–∫–æ–≤–æ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥–µ—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç–µ—Ä–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞, —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Å–∞–º–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

// #### –¢–∞–∫–æ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å `MenuItem`, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `name` —Ç–∞ `price` –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.

class Order {
  #tableNumber;
  #items;
  #isPaid;

  constructor(tableNumber) {
    this.#tableNumber = tableNumber;
    this.#items = [];
    this.#isPaid = false;
  }

  calculateTotal() {
    return this.#items.reduce((acc, order) => acc + order.price, 0);
  }

  markAsPaid() {
    return (this.#isPaid = true);
  }

  addItem(item) {
    this.#items.push(item);
  }

  removeItem(item) {
    const index = this.#items.indexOf(item);
    if (index !== -1) {
      this.#items.splice(index, 1);
    }
  }
}

class MenuItem {
  constructor(name, price) 
}
